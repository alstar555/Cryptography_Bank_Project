// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class ClientHello;
class ClientHelloDefaultTypeInternal;
extern ClientHelloDefaultTypeInternal _ClientHello_default_instance_;
class EncryptedMessage;
class EncryptedMessageDefaultTypeInternal;
extern EncryptedMessageDefaultTypeInternal _EncryptedMessage_default_instance_;
class HMACSend;
class HMACSendDefaultTypeInternal;
extern HMACSendDefaultTypeInternal _HMACSend_default_instance_;
class MACMessage;
class MACMessageDefaultTypeInternal;
extern MACMessageDefaultTypeInternal _MACMessage_default_instance_;
class ServerHello;
class ServerHelloDefaultTypeInternal;
extern ServerHelloDefaultTypeInternal _ServerHello_default_instance_;
class ServerHelloContent;
class ServerHelloContentDefaultTypeInternal;
extern ServerHelloContentDefaultTypeInternal _ServerHelloContent_default_instance_;
class UnencryptedMessage;
class UnencryptedMessageDefaultTypeInternal;
extern UnencryptedMessageDefaultTypeInternal _UnencryptedMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientHello* Arena::CreateMaybeMessage<::ClientHello>(Arena*);
template<> ::EncryptedMessage* Arena::CreateMaybeMessage<::EncryptedMessage>(Arena*);
template<> ::HMACSend* Arena::CreateMaybeMessage<::HMACSend>(Arena*);
template<> ::MACMessage* Arena::CreateMaybeMessage<::MACMessage>(Arena*);
template<> ::ServerHello* Arena::CreateMaybeMessage<::ServerHello>(Arena*);
template<> ::ServerHelloContent* Arena::CreateMaybeMessage<::ServerHelloContent>(Arena*);
template<> ::UnencryptedMessage* Arena::CreateMaybeMessage<::UnencryptedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ServerHelloContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerHelloContent) */ {
 public:
  inline ServerHelloContent() : ServerHelloContent(nullptr) {};
  virtual ~ServerHelloContent();

  ServerHelloContent(const ServerHelloContent& from);
  ServerHelloContent(ServerHelloContent&& from) noexcept
    : ServerHelloContent() {
    *this = ::std::move(from);
  }

  inline ServerHelloContent& operator=(const ServerHelloContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerHelloContent& operator=(ServerHelloContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerHelloContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHelloContent* internal_default_instance() {
    return reinterpret_cast<const ServerHelloContent*>(
               &_ServerHelloContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerHelloContent& a, ServerHelloContent& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerHelloContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerHelloContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerHelloContent* New() const final {
    return CreateMaybeMessage<ServerHelloContent>(nullptr);
  }

  ServerHelloContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerHelloContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerHelloContent& from);
  void MergeFrom(const ServerHelloContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerHelloContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerHelloContent";
  }
  protected:
  explicit ServerHelloContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffieHellmanValueFieldNumber = 1,
  };
  // bytes diffie_hellman_value = 1;
  void clear_diffie_hellman_value();
  const std::string& diffie_hellman_value() const;
  void set_diffie_hellman_value(const std::string& value);
  void set_diffie_hellman_value(std::string&& value);
  void set_diffie_hellman_value(const char* value);
  void set_diffie_hellman_value(const void* value, size_t size);
  std::string* mutable_diffie_hellman_value();
  std::string* release_diffie_hellman_value();
  void set_allocated_diffie_hellman_value(std::string* diffie_hellman_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_diffie_hellman_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_diffie_hellman_value(
      std::string* diffie_hellman_value);
  private:
  const std::string& _internal_diffie_hellman_value() const;
  void _internal_set_diffie_hellman_value(const std::string& value);
  std::string* _internal_mutable_diffie_hellman_value();
  public:

  // @@protoc_insertion_point(class_scope:ServerHelloContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diffie_hellman_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ServerHello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerHello) */ {
 public:
  inline ServerHello() : ServerHello(nullptr) {};
  virtual ~ServerHello();

  ServerHello(const ServerHello& from);
  ServerHello(ServerHello&& from) noexcept
    : ServerHello() {
    *this = ::std::move(from);
  }

  inline ServerHello& operator=(const ServerHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerHello& operator=(ServerHello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHello* internal_default_instance() {
    return reinterpret_cast<const ServerHello*>(
               &_ServerHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerHello& a, ServerHello& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerHello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerHello* New() const final {
    return CreateMaybeMessage<ServerHello>(nullptr);
  }

  ServerHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerHello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerHello& from);
  void MergeFrom(const ServerHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerHello";
  }
  protected:
  explicit ServerHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerMsgFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes inner_msg = 1;
  void clear_inner_msg();
  const std::string& inner_msg() const;
  void set_inner_msg(const std::string& value);
  void set_inner_msg(std::string&& value);
  void set_inner_msg(const char* value);
  void set_inner_msg(const void* value, size_t size);
  std::string* mutable_inner_msg();
  std::string* release_inner_msg();
  void set_allocated_inner_msg(std::string* inner_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inner_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inner_msg(
      std::string* inner_msg);
  private:
  const std::string& _internal_inner_msg() const;
  void _internal_set_inner_msg(const std::string& value);
  std::string* _internal_mutable_inner_msg();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:ServerHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientHello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientHello) */ {
 public:
  inline ClientHello() : ClientHello(nullptr) {};
  virtual ~ClientHello();

  ClientHello(const ClientHello& from);
  ClientHello(ClientHello&& from) noexcept
    : ClientHello() {
    *this = ::std::move(from);
  }

  inline ClientHello& operator=(const ClientHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientHello& operator=(ClientHello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientHello* internal_default_instance() {
    return reinterpret_cast<const ClientHello*>(
               &_ClientHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientHello& a, ClientHello& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientHello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientHello* New() const final {
    return CreateMaybeMessage<ClientHello>(nullptr);
  }

  ClientHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientHello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientHello& from);
  void MergeFrom(const ClientHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientHello";
  }
  protected:
  explicit ClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffieHellmanValueFieldNumber = 1,
  };
  // bytes diffie_hellman_value = 1;
  void clear_diffie_hellman_value();
  const std::string& diffie_hellman_value() const;
  void set_diffie_hellman_value(const std::string& value);
  void set_diffie_hellman_value(std::string&& value);
  void set_diffie_hellman_value(const char* value);
  void set_diffie_hellman_value(const void* value, size_t size);
  std::string* mutable_diffie_hellman_value();
  std::string* release_diffie_hellman_value();
  void set_allocated_diffie_hellman_value(std::string* diffie_hellman_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_diffie_hellman_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_diffie_hellman_value(
      std::string* diffie_hellman_value);
  private:
  const std::string& _internal_diffie_hellman_value() const;
  void _internal_set_diffie_hellman_value(const std::string& value);
  std::string* _internal_mutable_diffie_hellman_value();
  public:

  // @@protoc_insertion_point(class_scope:ClientHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diffie_hellman_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class HMACSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HMACSend) */ {
 public:
  inline HMACSend() : HMACSend(nullptr) {};
  virtual ~HMACSend();

  HMACSend(const HMACSend& from);
  HMACSend(HMACSend&& from) noexcept
    : HMACSend() {
    *this = ::std::move(from);
  }

  inline HMACSend& operator=(const HMACSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMACSend& operator=(HMACSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMACSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMACSend* internal_default_instance() {
    return reinterpret_cast<const HMACSend*>(
               &_HMACSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HMACSend& a, HMACSend& b) {
    a.Swap(&b);
  }
  inline void Swap(HMACSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMACSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMACSend* New() const final {
    return CreateMaybeMessage<HMACSend>(nullptr);
  }

  HMACSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMACSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMACSend& from);
  void MergeFrom(const HMACSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMACSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HMACSend";
  }
  protected:
  explicit HMACSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedHmacFieldNumber = 1,
    kIvFieldNumber = 2,
  };
  // bytes encrypted_hmac = 1;
  void clear_encrypted_hmac();
  const std::string& encrypted_hmac() const;
  void set_encrypted_hmac(const std::string& value);
  void set_encrypted_hmac(std::string&& value);
  void set_encrypted_hmac(const char* value);
  void set_encrypted_hmac(const void* value, size_t size);
  std::string* mutable_encrypted_hmac();
  std::string* release_encrypted_hmac();
  void set_allocated_encrypted_hmac(std::string* encrypted_hmac);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encrypted_hmac();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encrypted_hmac(
      std::string* encrypted_hmac);
  private:
  const std::string& _internal_encrypted_hmac() const;
  void _internal_set_encrypted_hmac(const std::string& value);
  std::string* _internal_mutable_encrypted_hmac();
  public:

  // fixed64 iv = 2;
  void clear_iv();
  ::PROTOBUF_NAMESPACE_ID::uint64 iv() const;
  void set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iv() const;
  void _internal_set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:HMACSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_hmac_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UnencryptedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnencryptedMessage) */ {
 public:
  inline UnencryptedMessage() : UnencryptedMessage(nullptr) {};
  virtual ~UnencryptedMessage();

  UnencryptedMessage(const UnencryptedMessage& from);
  UnencryptedMessage(UnencryptedMessage&& from) noexcept
    : UnencryptedMessage() {
    *this = ::std::move(from);
  }

  inline UnencryptedMessage& operator=(const UnencryptedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnencryptedMessage& operator=(UnencryptedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnencryptedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnencryptedMessage* internal_default_instance() {
    return reinterpret_cast<const UnencryptedMessage*>(
               &_UnencryptedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnencryptedMessage& a, UnencryptedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnencryptedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnencryptedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnencryptedMessage* New() const final {
    return CreateMaybeMessage<UnencryptedMessage>(nullptr);
  }

  UnencryptedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnencryptedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnencryptedMessage& from);
  void MergeFrom(const UnencryptedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnencryptedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnencryptedMessage";
  }
  protected:
  explicit UnencryptedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerMsgFieldNumber = 1,
    kSeqNumFieldNumber = 2,
  };
  // string inner_msg = 1;
  void clear_inner_msg();
  const std::string& inner_msg() const;
  void set_inner_msg(const std::string& value);
  void set_inner_msg(std::string&& value);
  void set_inner_msg(const char* value);
  void set_inner_msg(const char* value, size_t size);
  std::string* mutable_inner_msg();
  std::string* release_inner_msg();
  void set_allocated_inner_msg(std::string* inner_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inner_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inner_msg(
      std::string* inner_msg);
  private:
  const std::string& _internal_inner_msg() const;
  void _internal_set_inner_msg(const std::string& value);
  std::string* _internal_mutable_inner_msg();
  public:

  // uint32 seq_num = 2;
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:UnencryptedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EncryptedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EncryptedMessage) */ {
 public:
  inline EncryptedMessage() : EncryptedMessage(nullptr) {};
  virtual ~EncryptedMessage();

  EncryptedMessage(const EncryptedMessage& from);
  EncryptedMessage(EncryptedMessage&& from) noexcept
    : EncryptedMessage() {
    *this = ::std::move(from);
  }

  inline EncryptedMessage& operator=(const EncryptedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedMessage& operator=(EncryptedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptedMessage* internal_default_instance() {
    return reinterpret_cast<const EncryptedMessage*>(
               &_EncryptedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EncryptedMessage& a, EncryptedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedMessage* New() const final {
    return CreateMaybeMessage<EncryptedMessage>(nullptr);
  }

  EncryptedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedMessage& from);
  void MergeFrom(const EncryptedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EncryptedMessage";
  }
  protected:
  explicit EncryptedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerMsgFieldNumber = 1,
    kIvFieldNumber = 2,
  };
  // bytes inner_msg = 1;
  void clear_inner_msg();
  const std::string& inner_msg() const;
  void set_inner_msg(const std::string& value);
  void set_inner_msg(std::string&& value);
  void set_inner_msg(const char* value);
  void set_inner_msg(const void* value, size_t size);
  std::string* mutable_inner_msg();
  std::string* release_inner_msg();
  void set_allocated_inner_msg(std::string* inner_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inner_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inner_msg(
      std::string* inner_msg);
  private:
  const std::string& _internal_inner_msg() const;
  void _internal_set_inner_msg(const std::string& value);
  std::string* _internal_mutable_inner_msg();
  public:

  // fixed64 iv = 2;
  void clear_iv();
  ::PROTOBUF_NAMESPACE_ID::uint64 iv() const;
  void set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iv() const;
  void _internal_set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:EncryptedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MACMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MACMessage) */ {
 public:
  inline MACMessage() : MACMessage(nullptr) {};
  virtual ~MACMessage();

  MACMessage(const MACMessage& from);
  MACMessage(MACMessage&& from) noexcept
    : MACMessage() {
    *this = ::std::move(from);
  }

  inline MACMessage& operator=(const MACMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MACMessage& operator=(MACMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MACMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MACMessage* internal_default_instance() {
    return reinterpret_cast<const MACMessage*>(
               &_MACMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MACMessage& a, MACMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MACMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MACMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MACMessage* New() const final {
    return CreateMaybeMessage<MACMessage>(nullptr);
  }

  MACMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MACMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MACMessage& from);
  void MergeFrom(const MACMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MACMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MACMessage";
  }
  protected:
  explicit MACMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 2,
    kInnerMsgFieldNumber = 1,
  };
  // bytes mac = 2;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mac();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mac(
      std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // .EncryptedMessage inner_msg = 1;
  bool has_inner_msg() const;
  private:
  bool _internal_has_inner_msg() const;
  public:
  void clear_inner_msg();
  const ::EncryptedMessage& inner_msg() const;
  ::EncryptedMessage* release_inner_msg();
  ::EncryptedMessage* mutable_inner_msg();
  void set_allocated_inner_msg(::EncryptedMessage* inner_msg);
  private:
  const ::EncryptedMessage& _internal_inner_msg() const;
  ::EncryptedMessage* _internal_mutable_inner_msg();
  public:
  void unsafe_arena_set_allocated_inner_msg(
      ::EncryptedMessage* inner_msg);
  ::EncryptedMessage* unsafe_arena_release_inner_msg();

  // @@protoc_insertion_point(class_scope:MACMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::EncryptedMessage* inner_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerHelloContent

// bytes diffie_hellman_value = 1;
inline void ServerHelloContent::clear_diffie_hellman_value() {
  diffie_hellman_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerHelloContent::diffie_hellman_value() const {
  // @@protoc_insertion_point(field_get:ServerHelloContent.diffie_hellman_value)
  return _internal_diffie_hellman_value();
}
inline void ServerHelloContent::set_diffie_hellman_value(const std::string& value) {
  _internal_set_diffie_hellman_value(value);
  // @@protoc_insertion_point(field_set:ServerHelloContent.diffie_hellman_value)
}
inline std::string* ServerHelloContent::mutable_diffie_hellman_value() {
  // @@protoc_insertion_point(field_mutable:ServerHelloContent.diffie_hellman_value)
  return _internal_mutable_diffie_hellman_value();
}
inline const std::string& ServerHelloContent::_internal_diffie_hellman_value() const {
  return diffie_hellman_value_.Get();
}
inline void ServerHelloContent::_internal_set_diffie_hellman_value(const std::string& value) {
  
  diffie_hellman_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerHelloContent::set_diffie_hellman_value(std::string&& value) {
  
  diffie_hellman_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerHelloContent.diffie_hellman_value)
}
inline void ServerHelloContent::set_diffie_hellman_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diffie_hellman_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerHelloContent.diffie_hellman_value)
}
inline void ServerHelloContent::set_diffie_hellman_value(const void* value,
    size_t size) {
  
  diffie_hellman_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerHelloContent.diffie_hellman_value)
}
inline std::string* ServerHelloContent::_internal_mutable_diffie_hellman_value() {
  
  return diffie_hellman_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerHelloContent::release_diffie_hellman_value() {
  // @@protoc_insertion_point(field_release:ServerHelloContent.diffie_hellman_value)
  return diffie_hellman_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerHelloContent::set_allocated_diffie_hellman_value(std::string* diffie_hellman_value) {
  if (diffie_hellman_value != nullptr) {
    
  } else {
    
  }
  diffie_hellman_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diffie_hellman_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerHelloContent.diffie_hellman_value)
}
inline std::string* ServerHelloContent::unsafe_arena_release_diffie_hellman_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerHelloContent.diffie_hellman_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return diffie_hellman_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerHelloContent::unsafe_arena_set_allocated_diffie_hellman_value(
    std::string* diffie_hellman_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (diffie_hellman_value != nullptr) {
    
  } else {
    
  }
  diffie_hellman_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      diffie_hellman_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerHelloContent.diffie_hellman_value)
}

// -------------------------------------------------------------------

// ServerHello

// bytes inner_msg = 1;
inline void ServerHello::clear_inner_msg() {
  inner_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerHello::inner_msg() const {
  // @@protoc_insertion_point(field_get:ServerHello.inner_msg)
  return _internal_inner_msg();
}
inline void ServerHello::set_inner_msg(const std::string& value) {
  _internal_set_inner_msg(value);
  // @@protoc_insertion_point(field_set:ServerHello.inner_msg)
}
inline std::string* ServerHello::mutable_inner_msg() {
  // @@protoc_insertion_point(field_mutable:ServerHello.inner_msg)
  return _internal_mutable_inner_msg();
}
inline const std::string& ServerHello::_internal_inner_msg() const {
  return inner_msg_.Get();
}
inline void ServerHello::_internal_set_inner_msg(const std::string& value) {
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerHello::set_inner_msg(std::string&& value) {
  
  inner_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerHello.inner_msg)
}
inline void ServerHello::set_inner_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerHello.inner_msg)
}
inline void ServerHello::set_inner_msg(const void* value,
    size_t size) {
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerHello.inner_msg)
}
inline std::string* ServerHello::_internal_mutable_inner_msg() {
  
  return inner_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerHello::release_inner_msg() {
  // @@protoc_insertion_point(field_release:ServerHello.inner_msg)
  return inner_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerHello::set_allocated_inner_msg(std::string* inner_msg) {
  if (inner_msg != nullptr) {
    
  } else {
    
  }
  inner_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerHello.inner_msg)
}
inline std::string* ServerHello::unsafe_arena_release_inner_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerHello.inner_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inner_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerHello::unsafe_arena_set_allocated_inner_msg(
    std::string* inner_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inner_msg != nullptr) {
    
  } else {
    
  }
  inner_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inner_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerHello.inner_msg)
}

// bytes signature = 2;
inline void ServerHello::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerHello::signature() const {
  // @@protoc_insertion_point(field_get:ServerHello.signature)
  return _internal_signature();
}
inline void ServerHello::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:ServerHello.signature)
}
inline std::string* ServerHello::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:ServerHello.signature)
  return _internal_mutable_signature();
}
inline const std::string& ServerHello::_internal_signature() const {
  return signature_.Get();
}
inline void ServerHello::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerHello::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerHello.signature)
}
inline void ServerHello::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerHello.signature)
}
inline void ServerHello::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerHello.signature)
}
inline std::string* ServerHello::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerHello::release_signature() {
  // @@protoc_insertion_point(field_release:ServerHello.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerHello::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerHello.signature)
}
inline std::string* ServerHello::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerHello.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerHello::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerHello.signature)
}

// -------------------------------------------------------------------

// ClientHello

// bytes diffie_hellman_value = 1;
inline void ClientHello::clear_diffie_hellman_value() {
  diffie_hellman_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientHello::diffie_hellman_value() const {
  // @@protoc_insertion_point(field_get:ClientHello.diffie_hellman_value)
  return _internal_diffie_hellman_value();
}
inline void ClientHello::set_diffie_hellman_value(const std::string& value) {
  _internal_set_diffie_hellman_value(value);
  // @@protoc_insertion_point(field_set:ClientHello.diffie_hellman_value)
}
inline std::string* ClientHello::mutable_diffie_hellman_value() {
  // @@protoc_insertion_point(field_mutable:ClientHello.diffie_hellman_value)
  return _internal_mutable_diffie_hellman_value();
}
inline const std::string& ClientHello::_internal_diffie_hellman_value() const {
  return diffie_hellman_value_.Get();
}
inline void ClientHello::_internal_set_diffie_hellman_value(const std::string& value) {
  
  diffie_hellman_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientHello::set_diffie_hellman_value(std::string&& value) {
  
  diffie_hellman_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientHello.diffie_hellman_value)
}
inline void ClientHello::set_diffie_hellman_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diffie_hellman_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientHello.diffie_hellman_value)
}
inline void ClientHello::set_diffie_hellman_value(const void* value,
    size_t size) {
  
  diffie_hellman_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientHello.diffie_hellman_value)
}
inline std::string* ClientHello::_internal_mutable_diffie_hellman_value() {
  
  return diffie_hellman_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientHello::release_diffie_hellman_value() {
  // @@protoc_insertion_point(field_release:ClientHello.diffie_hellman_value)
  return diffie_hellman_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHello::set_allocated_diffie_hellman_value(std::string* diffie_hellman_value) {
  if (diffie_hellman_value != nullptr) {
    
  } else {
    
  }
  diffie_hellman_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diffie_hellman_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientHello.diffie_hellman_value)
}
inline std::string* ClientHello::unsafe_arena_release_diffie_hellman_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientHello.diffie_hellman_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return diffie_hellman_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientHello::unsafe_arena_set_allocated_diffie_hellman_value(
    std::string* diffie_hellman_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (diffie_hellman_value != nullptr) {
    
  } else {
    
  }
  diffie_hellman_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      diffie_hellman_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientHello.diffie_hellman_value)
}

// -------------------------------------------------------------------

// HMACSend

// bytes encrypted_hmac = 1;
inline void HMACSend::clear_encrypted_hmac() {
  encrypted_hmac_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HMACSend::encrypted_hmac() const {
  // @@protoc_insertion_point(field_get:HMACSend.encrypted_hmac)
  return _internal_encrypted_hmac();
}
inline void HMACSend::set_encrypted_hmac(const std::string& value) {
  _internal_set_encrypted_hmac(value);
  // @@protoc_insertion_point(field_set:HMACSend.encrypted_hmac)
}
inline std::string* HMACSend::mutable_encrypted_hmac() {
  // @@protoc_insertion_point(field_mutable:HMACSend.encrypted_hmac)
  return _internal_mutable_encrypted_hmac();
}
inline const std::string& HMACSend::_internal_encrypted_hmac() const {
  return encrypted_hmac_.Get();
}
inline void HMACSend::_internal_set_encrypted_hmac(const std::string& value) {
  
  encrypted_hmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HMACSend::set_encrypted_hmac(std::string&& value) {
  
  encrypted_hmac_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HMACSend.encrypted_hmac)
}
inline void HMACSend::set_encrypted_hmac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_hmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HMACSend.encrypted_hmac)
}
inline void HMACSend::set_encrypted_hmac(const void* value,
    size_t size) {
  
  encrypted_hmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HMACSend.encrypted_hmac)
}
inline std::string* HMACSend::_internal_mutable_encrypted_hmac() {
  
  return encrypted_hmac_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HMACSend::release_encrypted_hmac() {
  // @@protoc_insertion_point(field_release:HMACSend.encrypted_hmac)
  return encrypted_hmac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMACSend::set_allocated_encrypted_hmac(std::string* encrypted_hmac) {
  if (encrypted_hmac != nullptr) {
    
  } else {
    
  }
  encrypted_hmac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_hmac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HMACSend.encrypted_hmac)
}
inline std::string* HMACSend::unsafe_arena_release_encrypted_hmac() {
  // @@protoc_insertion_point(field_unsafe_arena_release:HMACSend.encrypted_hmac)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encrypted_hmac_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HMACSend::unsafe_arena_set_allocated_encrypted_hmac(
    std::string* encrypted_hmac) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encrypted_hmac != nullptr) {
    
  } else {
    
  }
  encrypted_hmac_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encrypted_hmac, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HMACSend.encrypted_hmac)
}

// fixed64 iv = 2;
inline void HMACSend::clear_iv() {
  iv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HMACSend::_internal_iv() const {
  return iv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HMACSend::iv() const {
  // @@protoc_insertion_point(field_get:HMACSend.iv)
  return _internal_iv();
}
inline void HMACSend::_internal_set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iv_ = value;
}
inline void HMACSend::set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iv(value);
  // @@protoc_insertion_point(field_set:HMACSend.iv)
}

// -------------------------------------------------------------------

// UnencryptedMessage

// string inner_msg = 1;
inline void UnencryptedMessage::clear_inner_msg() {
  inner_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnencryptedMessage::inner_msg() const {
  // @@protoc_insertion_point(field_get:UnencryptedMessage.inner_msg)
  return _internal_inner_msg();
}
inline void UnencryptedMessage::set_inner_msg(const std::string& value) {
  _internal_set_inner_msg(value);
  // @@protoc_insertion_point(field_set:UnencryptedMessage.inner_msg)
}
inline std::string* UnencryptedMessage::mutable_inner_msg() {
  // @@protoc_insertion_point(field_mutable:UnencryptedMessage.inner_msg)
  return _internal_mutable_inner_msg();
}
inline const std::string& UnencryptedMessage::_internal_inner_msg() const {
  return inner_msg_.Get();
}
inline void UnencryptedMessage::_internal_set_inner_msg(const std::string& value) {
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnencryptedMessage::set_inner_msg(std::string&& value) {
  
  inner_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UnencryptedMessage.inner_msg)
}
inline void UnencryptedMessage::set_inner_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UnencryptedMessage.inner_msg)
}
inline void UnencryptedMessage::set_inner_msg(const char* value,
    size_t size) {
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UnencryptedMessage.inner_msg)
}
inline std::string* UnencryptedMessage::_internal_mutable_inner_msg() {
  
  return inner_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnencryptedMessage::release_inner_msg() {
  // @@protoc_insertion_point(field_release:UnencryptedMessage.inner_msg)
  return inner_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnencryptedMessage::set_allocated_inner_msg(std::string* inner_msg) {
  if (inner_msg != nullptr) {
    
  } else {
    
  }
  inner_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UnencryptedMessage.inner_msg)
}
inline std::string* UnencryptedMessage::unsafe_arena_release_inner_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UnencryptedMessage.inner_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inner_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnencryptedMessage::unsafe_arena_set_allocated_inner_msg(
    std::string* inner_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inner_msg != nullptr) {
    
  } else {
    
  }
  inner_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inner_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnencryptedMessage.inner_msg)
}

// uint32 seq_num = 2;
inline void UnencryptedMessage::clear_seq_num() {
  seq_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnencryptedMessage::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnencryptedMessage::seq_num() const {
  // @@protoc_insertion_point(field_get:UnencryptedMessage.seq_num)
  return _internal_seq_num();
}
inline void UnencryptedMessage::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_num_ = value;
}
inline void UnencryptedMessage::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:UnencryptedMessage.seq_num)
}

// -------------------------------------------------------------------

// EncryptedMessage

// bytes inner_msg = 1;
inline void EncryptedMessage::clear_inner_msg() {
  inner_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncryptedMessage::inner_msg() const {
  // @@protoc_insertion_point(field_get:EncryptedMessage.inner_msg)
  return _internal_inner_msg();
}
inline void EncryptedMessage::set_inner_msg(const std::string& value) {
  _internal_set_inner_msg(value);
  // @@protoc_insertion_point(field_set:EncryptedMessage.inner_msg)
}
inline std::string* EncryptedMessage::mutable_inner_msg() {
  // @@protoc_insertion_point(field_mutable:EncryptedMessage.inner_msg)
  return _internal_mutable_inner_msg();
}
inline const std::string& EncryptedMessage::_internal_inner_msg() const {
  return inner_msg_.Get();
}
inline void EncryptedMessage::_internal_set_inner_msg(const std::string& value) {
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncryptedMessage::set_inner_msg(std::string&& value) {
  
  inner_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EncryptedMessage.inner_msg)
}
inline void EncryptedMessage::set_inner_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:EncryptedMessage.inner_msg)
}
inline void EncryptedMessage::set_inner_msg(const void* value,
    size_t size) {
  
  inner_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EncryptedMessage.inner_msg)
}
inline std::string* EncryptedMessage::_internal_mutable_inner_msg() {
  
  return inner_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncryptedMessage::release_inner_msg() {
  // @@protoc_insertion_point(field_release:EncryptedMessage.inner_msg)
  return inner_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptedMessage::set_allocated_inner_msg(std::string* inner_msg) {
  if (inner_msg != nullptr) {
    
  } else {
    
  }
  inner_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EncryptedMessage.inner_msg)
}
inline std::string* EncryptedMessage::unsafe_arena_release_inner_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:EncryptedMessage.inner_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inner_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EncryptedMessage::unsafe_arena_set_allocated_inner_msg(
    std::string* inner_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inner_msg != nullptr) {
    
  } else {
    
  }
  inner_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inner_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EncryptedMessage.inner_msg)
}

// fixed64 iv = 2;
inline void EncryptedMessage::clear_iv() {
  iv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EncryptedMessage::_internal_iv() const {
  return iv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EncryptedMessage::iv() const {
  // @@protoc_insertion_point(field_get:EncryptedMessage.iv)
  return _internal_iv();
}
inline void EncryptedMessage::_internal_set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iv_ = value;
}
inline void EncryptedMessage::set_iv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iv(value);
  // @@protoc_insertion_point(field_set:EncryptedMessage.iv)
}

// -------------------------------------------------------------------

// MACMessage

// .EncryptedMessage inner_msg = 1;
inline bool MACMessage::_internal_has_inner_msg() const {
  return this != internal_default_instance() && inner_msg_ != nullptr;
}
inline bool MACMessage::has_inner_msg() const {
  return _internal_has_inner_msg();
}
inline void MACMessage::clear_inner_msg() {
  if (GetArena() == nullptr && inner_msg_ != nullptr) {
    delete inner_msg_;
  }
  inner_msg_ = nullptr;
}
inline const ::EncryptedMessage& MACMessage::_internal_inner_msg() const {
  const ::EncryptedMessage* p = inner_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EncryptedMessage*>(
      &::_EncryptedMessage_default_instance_);
}
inline const ::EncryptedMessage& MACMessage::inner_msg() const {
  // @@protoc_insertion_point(field_get:MACMessage.inner_msg)
  return _internal_inner_msg();
}
inline void MACMessage::unsafe_arena_set_allocated_inner_msg(
    ::EncryptedMessage* inner_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_msg_);
  }
  inner_msg_ = inner_msg;
  if (inner_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MACMessage.inner_msg)
}
inline ::EncryptedMessage* MACMessage::release_inner_msg() {
  auto temp = unsafe_arena_release_inner_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EncryptedMessage* MACMessage::unsafe_arena_release_inner_msg() {
  // @@protoc_insertion_point(field_release:MACMessage.inner_msg)
  
  ::EncryptedMessage* temp = inner_msg_;
  inner_msg_ = nullptr;
  return temp;
}
inline ::EncryptedMessage* MACMessage::_internal_mutable_inner_msg() {
  
  if (inner_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::EncryptedMessage>(GetArena());
    inner_msg_ = p;
  }
  return inner_msg_;
}
inline ::EncryptedMessage* MACMessage::mutable_inner_msg() {
  // @@protoc_insertion_point(field_mutable:MACMessage.inner_msg)
  return _internal_mutable_inner_msg();
}
inline void MACMessage::set_allocated_inner_msg(::EncryptedMessage* inner_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inner_msg_;
  }
  if (inner_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inner_msg);
    if (message_arena != submessage_arena) {
      inner_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_msg, submessage_arena);
    }
    
  } else {
    
  }
  inner_msg_ = inner_msg;
  // @@protoc_insertion_point(field_set_allocated:MACMessage.inner_msg)
}

// bytes mac = 2;
inline void MACMessage::clear_mac() {
  mac_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MACMessage::mac() const {
  // @@protoc_insertion_point(field_get:MACMessage.mac)
  return _internal_mac();
}
inline void MACMessage::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:MACMessage.mac)
}
inline std::string* MACMessage::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:MACMessage.mac)
  return _internal_mutable_mac();
}
inline const std::string& MACMessage::_internal_mac() const {
  return mac_.Get();
}
inline void MACMessage::_internal_set_mac(const std::string& value) {
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MACMessage::set_mac(std::string&& value) {
  
  mac_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MACMessage.mac)
}
inline void MACMessage::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MACMessage.mac)
}
inline void MACMessage::set_mac(const void* value,
    size_t size) {
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MACMessage.mac)
}
inline std::string* MACMessage::_internal_mutable_mac() {
  
  return mac_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MACMessage::release_mac() {
  // @@protoc_insertion_point(field_release:MACMessage.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MACMessage::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MACMessage.mac)
}
inline std::string* MACMessage::unsafe_arena_release_mac() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MACMessage.mac)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mac_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MACMessage::unsafe_arena_set_allocated_mac(
    std::string* mac) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mac, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MACMessage.mac)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
